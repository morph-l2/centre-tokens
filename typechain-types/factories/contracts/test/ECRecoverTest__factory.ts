/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ECRecoverTest,
  ECRecoverTestInterface,
} from "../../../contracts/test/ECRecoverTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "digest",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "recover",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610316806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c2bf17b014610030575b600080fd5b6100626004803603608081101561004657600080fd5b5080359060ff602082013516906040810135906060013561008b565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6000610099858585856100a2565b95945050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561011d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806102bb6026913960400191505060405180910390fd5b8360ff16601b1415801561013557508360ff16601c14155b1561018b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806102956026913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156101e7573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661009957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f45435265636f7665723a20696e76616c6964207369676e617475726500000000604482015290519081900360640190fdfe45435265636f7665723a20696e76616c6964207369676e6174757265202776272076616c756545435265636f7665723a20696e76616c6964207369676e6174757265202773272076616c7565a264697066735822122007210f695df03e53035fd6ee9f527be92b0a6dc781aa1b5faba127f8519cec1b64736f6c634300060c0033";

type ECRecoverTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ECRecoverTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ECRecoverTest__factory extends ContractFactory {
  constructor(...args: ECRecoverTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ECRecoverTest> {
    return super.deploy(overrides || {}) as Promise<ECRecoverTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ECRecoverTest {
    return super.attach(address) as ECRecoverTest;
  }
  override connect(signer: Signer): ECRecoverTest__factory {
    return super.connect(signer) as ECRecoverTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ECRecoverTestInterface {
    return new utils.Interface(_abi) as ECRecoverTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ECRecoverTest {
    return new Contract(address, _abi, signerOrProvider) as ECRecoverTest;
  }
}
